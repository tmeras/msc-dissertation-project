package com.theodoremeras.dissertation.user;

import com.theodoremeras.dissertation.department.DepartmentEntity;
import com.theodoremeras.dissertation.department.DepartmentService;
import com.theodoremeras.dissertation.role.RoleEntity;
import com.theodoremeras.dissertation.role.RoleService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
public class UserController {

    private UserService userService;

    private RoleService roleService;

    private DepartmentService departmentService;

    private UserMapper userMapper;

    public UserController(
            UserService userService, RoleService roleService,
            DepartmentService departmentService, UserMapper userMapper
    ) {
        this.userService = userService;
        this.roleService = roleService;
        this.departmentService = departmentService;
        this.userMapper = userMapper;
    }

    @PostMapping(path = "/users")
    public ResponseEntity<UserDto> createUser(@RequestBody UserDto userDto) {
        // Id will be autogenerated
        userDto.setId(null);

        UserEntity userEntity = userMapper.mapFromDto(userDto);

        // Department and role must be specified when creating new user
        if (userEntity.getRole() == null || userEntity.getDepartment() == null)
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

        // Verify that the specified role exists
        Optional<RoleEntity> role = roleService.findOneById(userEntity.getRole().getId());
        if (role.isPresent())
            userEntity.setRole(role.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        // Verify that the specified department exists
        Optional<DepartmentEntity> department = departmentService.findOneById(userEntity.getDepartment().getId());
        if (department.isPresent())
            userEntity.setDepartment(department.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        UserEntity savedUserEntity = userService.save(userEntity);

        System.out.println(savedUserEntity);

        return new ResponseEntity<>(userMapper.mapToDto(savedUserEntity), HttpStatus.CREATED);
    }

    @GetMapping(path = "/users")
    public List<UserDto> getAllUsers() {
        List<UserEntity> userEntities = userService.findAll();

        return userEntities.stream()
                .map(userMapper::mapToDto)
                .collect(Collectors.toList());
    }

    @GetMapping(path = "/users/{id}")
    public ResponseEntity<UserDto> GetUserById(@PathVariable("id") Integer id) {
        Optional<UserEntity> foundUser = userService.findOneById(id);

        return foundUser.map(userEntity -> {
            UserDto userDto = userMapper.mapToDto(userEntity);
            return new ResponseEntity<>(userDto, HttpStatus.OK);
        }).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PatchMapping(path = "/users/{id}")
    public ResponseEntity<UserDto> partialUpdateUser(
            @PathVariable("id") Integer id, @RequestBody UserDto userDto
    ) {
        if (!userService.exists(id))
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        userDto.setId(id);
        UserEntity userEntity = userMapper.mapFromDto(userDto);
        UserEntity updatedUserEntity = userService.partialUpdate(id, userEntity);
        return new ResponseEntity<>(userMapper.mapToDto(updatedUserEntity), HttpStatus.OK);
    }

    @DeleteMapping(path = "/users/{id}")
    public ResponseEntity<String> deleteUser(@PathVariable("id") Integer id) {
        userService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
