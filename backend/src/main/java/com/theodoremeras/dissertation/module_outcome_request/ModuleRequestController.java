package com.theodoremeras.dissertation.module_outcome_request;

import com.theodoremeras.dissertation.ec_application.EcApplicationEntity;
import com.theodoremeras.dissertation.ec_application.EcApplicationService;
import com.theodoremeras.dissertation.module.ModuleEntity;
import com.theodoremeras.dissertation.module.ModuleService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
public class ModuleRequestController {

    private ModuleRequestService moduleRequestService;

    private EcApplicationService ecApplicationService;

    private ModuleService moduleService;

    private ModuleRequestMapper moduleRequestMapper;

    public ModuleRequestController(
            ModuleRequestService moduleRequestService, EcApplicationService ecApplicationService,
            ModuleService moduleService, ModuleRequestMapper moduleRequestMapper
    ) {
        this.moduleRequestService = moduleRequestService;
        this.ecApplicationService = ecApplicationService;
        this.moduleService = moduleService;
        this.moduleRequestMapper = moduleRequestMapper;
    }

    @PostMapping(path = "/module-requests")
    public ResponseEntity<ModuleRequestDto> createModuleRequest(
            @RequestBody ModuleRequestDto requestDto
    ) {
        // Id will be autogenerated
        requestDto.setId(null);

        ModuleRequestEntity requestEntity = moduleRequestMapper.mapFromDto(requestDto);

        // EC application and module must be specified when creating new module outcome request
        if (requestEntity.getEcApplication() == null || requestEntity.getModule() == null)
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

        // Verify that the specified EC application exists
        Optional<EcApplicationEntity> ecApplication =
                ecApplicationService.findOneById(requestEntity.getEcApplication().getId());
        if (ecApplication.isPresent())
            requestEntity.setEcApplication(ecApplication.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        // Verify that the specified module exists
        Optional<ModuleEntity> module =
                moduleService.findOneByCode(requestEntity.getModule().getCode());
        if (module.isPresent())
            requestEntity.setModule(module.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        ModuleRequestEntity savedRequestEntity = moduleRequestService.save(requestEntity);
        return new ResponseEntity<>(moduleRequestMapper.mapToDto(savedRequestEntity), HttpStatus.CREATED);
    }

    @GetMapping(path = "/module-requests")
    public List<ModuleRequestDto> getAllModuleRequests(
            @RequestParam(value = "ecApplicationId", required = false) Integer ecApplicationId
    ) {
        List<ModuleRequestEntity> requestEntities =
                (ecApplicationId == null) ? moduleRequestService.findAll() :
                moduleRequestService.findAllByEcApplicationId(ecApplicationId);

        return requestEntities.stream()
                .map(moduleRequestMapper::mapToDto)
                .collect(Collectors.toList());
    }

    @GetMapping(path = "/module-requests/{id}")
    public ResponseEntity<ModuleRequestDto> getModuleRequestById(@PathVariable("id") Integer id) {
        Optional<ModuleRequestEntity> foundRequest = moduleRequestService.findOneById(id);

        return foundRequest.map(requestEntity -> {
            ModuleRequestDto requestDto = moduleRequestMapper.mapToDto(requestEntity);
            return new ResponseEntity<>(requestDto, HttpStatus.OK);
        }).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PatchMapping(path = "/module-requests/{id}")
    public ResponseEntity<ModuleRequestDto> partialUpdateModuleRequest(
            @PathVariable("id") Integer id, @RequestBody ModuleRequestDto requestDto
    ) {
        if (!moduleRequestService.exists(id))
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        requestDto.setId(id);
        ModuleRequestEntity requestEntity = moduleRequestMapper.mapFromDto(requestDto);
        ModuleRequestEntity updatedRequestEntity = moduleRequestService.partialUpdate(id, requestEntity);
        return new ResponseEntity<>(moduleRequestMapper.mapToDto(updatedRequestEntity), HttpStatus.OK);
    }

    @DeleteMapping(path ="/module-requests/{id}")
    public ResponseEntity<String> deleteModuleRequest(@PathVariable("id") Integer id) {
        moduleRequestService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
