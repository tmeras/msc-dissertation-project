package com.theodoremeras.dissertation.authentication;

import com.theodoremeras.dissertation.department.DepartmentEntity;
import com.theodoremeras.dissertation.department.DepartmentService;
import com.theodoremeras.dissertation.role.RoleEntity;
import com.theodoremeras.dissertation.role.RoleService;
import com.theodoremeras.dissertation.user.UserDto;
import com.theodoremeras.dissertation.user.UserEntity;
import com.theodoremeras.dissertation.user.UserMapper;
import com.theodoremeras.dissertation.user.UserService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.Optional;

@RestController
public class AuthenticationController {

    private AuthenticationService authenticationService;

    private UserService userService;

    private RoleService roleService;

    private DepartmentService departmentService;

    private UserRegistrationMapper userRegistrationMapper;

    private UserMapper userMapper;

    public AuthenticationController(
            AuthenticationService authenticationService, UserService userService,
            RoleService roleService, DepartmentService departmentService,
            UserRegistrationMapper userRegistrationMapper, UserMapper userMapper
    ) {
        this.authenticationService = authenticationService;
        this.userService = userService;
        this.roleService = roleService;
        this.departmentService = departmentService;
        this.userRegistrationMapper = userRegistrationMapper;
        this.userMapper = userMapper;
    }

    @PostMapping(path = "/auth/register")
    public ResponseEntity<UserDto> registerUser(@RequestBody @Valid UserRegistrationDto userRegistrationDto) {
        // Id will be autogenerated
        userRegistrationDto.setId(null);

        UserEntity userEntity = userRegistrationMapper.mapFromDto(userRegistrationDto);

        // User email must be unique
        if (!userService.findAllByEmail(userEntity.getEmail()).isEmpty())
            return new ResponseEntity<>(HttpStatus.CONFLICT);

        // Verify that the specified role exists
        Optional<RoleEntity> role = roleService.findOneById(userEntity.getRole().getId());
        if (role.isPresent())
            userEntity.setRole(role.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        // Verify that the specified department exists
        Optional<DepartmentEntity> department = departmentService.findOneById(userEntity.getDepartment().getId());
        if (department.isPresent())
            userEntity.setDepartment(department.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        UserEntity savedUserEntity = authenticationService.registerUser(userEntity);

        return new ResponseEntity<>(userMapper.mapToDto(savedUserEntity), HttpStatus.CREATED);
    }

    @PostMapping(path = "/auth/login")
    public ResponseEntity<UserLoginResponseDto> loginUser(@RequestBody @Valid UserLoginRequestDto userLoginRequestDto) {
        var result = authenticationService.loginUser(userLoginRequestDto);

        if (result != null)
            return new ResponseEntity<>(result, HttpStatus.OK);
        else
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
    }

}
