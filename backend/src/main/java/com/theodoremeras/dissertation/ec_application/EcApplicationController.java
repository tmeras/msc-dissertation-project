package com.theodoremeras.dissertation.ec_application;

import com.theodoremeras.dissertation.user.UserEntity;
import com.theodoremeras.dissertation.user.UserService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
public class EcApplicationController {

    private EcApplicationService ecApplicationService;

    private UserService userService;

    private EcApplicationMapper ecApplicationMapper;

    private JwtDecoder jwtDecoder;

    public EcApplicationController(
            EcApplicationService ecApplicationService, UserService userService,
            EcApplicationMapper ecApplicationMapper, JwtDecoder jwtDecoder
    ) {
        this.ecApplicationService = ecApplicationService;
        this.userService = userService;
        this.ecApplicationMapper = ecApplicationMapper;
        this.jwtDecoder = jwtDecoder;
    }

    @PostMapping(path = "/ec-applications")
    public ResponseEntity<EcApplicationDto> createEcApplication(
            @RequestBody @Valid EcApplicationDto ecApplicationDto
    ) {
        // Id will be autogenerated
        ecApplicationDto.setId(null);

        EcApplicationEntity ecApplicationEntity = ecApplicationMapper.mapFromDto(ecApplicationDto);

        // Verify that the specified student exists
        Optional<UserEntity> student = userService.findOneById(ecApplicationEntity.getStudent().getId());
        if (student.isPresent())
            ecApplicationEntity.setStudent(student.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        EcApplicationEntity savedEcApplicationEntity = ecApplicationService.save(ecApplicationEntity);
        return new ResponseEntity<>(ecApplicationMapper.mapToDto(savedEcApplicationEntity), HttpStatus.CREATED);
    }

    @GetMapping(path = "/ec-applications")
    public ResponseEntity<List<EcApplicationDto>> getAllEcApplications(
            @RequestParam(value = "ids", required = false) List<Integer> ids,
            @RequestParam(value = "studentId", required = false) Integer studentId,
            @RequestParam(value = "studentDepartmentId", required = false) Integer studentDepartmentId,
            @RequestParam(value = "isReferred", required = false) Boolean isReferred,
            @RequestHeader(name = "Authorization") String token
    ) {
        // Extract the user's id and role from the token
        Jwt jwt = jwtDecoder.decode(token.split(" ")[1]);
        Long userId = jwt.getClaim("userId");
        String userRole = jwt.getClaim("roles");

        List<EcApplicationEntity> ecApplicationEntities;

        // Fetch all EC applications whose id is in the provided list
        if (ids != null)
            // Students are not allowed to fetch all EC applications
            if (userRole.equals("Student"))
                return new ResponseEntity<>(HttpStatus.FORBIDDEN);
            else
                ecApplicationEntities = ecApplicationService.findAllByIdIn(ids);

        // Fetch all EC applications submitted by the student with the specified student id
        else if (studentId != null)
            // Students are not allowed to view EC applications made by other students
            if (userRole.equals("Student") && userId.intValue() != studentId)
                return new ResponseEntity<>(HttpStatus.FORBIDDEN);
            else
                ecApplicationEntities = ecApplicationService.findAllByStudentId(studentId);

        // Fetch all EC applications submitted by students who belong to the specified department
        // and according to their referred status
        else if (studentDepartmentId != null && isReferred != null)
            // Students are only allowed to fetch EC applications related to them
            if (userRole.equals("Student"))
                return new ResponseEntity<>(HttpStatus.FORBIDDEN);
            else
                ecApplicationEntities =
                        ecApplicationService.findAllByStudentDepartmentIdAndIsReferred(studentDepartmentId, isReferred);

        // Fetch all EC applications submitted by students who belong to the specified department
        else if (studentDepartmentId != null)
            // Students are only allowed to fetch EC applications related to them
            if (userRole.equals("Student"))
                return new ResponseEntity<>(HttpStatus.FORBIDDEN);
            else
                ecApplicationEntities = ecApplicationService.findAllByStudentDepartmentId(studentDepartmentId);

        // Otherwise, fetch all EC applications
        else
            // Students are not allowed to fetch all EC applications
            if (userRole.equals("Student"))
                return new ResponseEntity<>(HttpStatus.FORBIDDEN);
            else
                ecApplicationEntities = ecApplicationService.findAll();

        return new ResponseEntity<>(ecApplicationEntities.stream()
                .map(ecApplicationMapper::mapToDto)
                .collect(Collectors.toList()), HttpStatus.OK);
    }

    @GetMapping(path = "/ec-applications/{id}")
    public ResponseEntity<EcApplicationDto> getEcApplicationById(
            @PathVariable("id") Integer id,
            @RequestHeader(name = "Authorization") String token
    ) {
        // Extract the user's id and role from the token
        Jwt jwt = jwtDecoder.decode(token.split(" ")[1]);
        Long userId = jwt.getClaim("userId");
        String userRole = jwt.getClaim("roles");

        Optional<EcApplicationEntity> foundEcApplicationEntity = ecApplicationService.findOneById(id);
        if (foundEcApplicationEntity.isEmpty())
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        // Students are only allowed to view their own EC applications
        if (userRole.equals("Student") && userId.intValue() != foundEcApplicationEntity.get().getStudent().getId())
            return new ResponseEntity<>(HttpStatus.FORBIDDEN);

        EcApplicationDto ecApplicationDto = ecApplicationMapper.mapToDto(foundEcApplicationEntity.get());
        return new ResponseEntity<>(ecApplicationDto, HttpStatus.OK);
    }

    @PatchMapping(path = "/ec-applications/{id}")
    public ResponseEntity<EcApplicationDto> partialUpdateEcApplication(
            @PathVariable("id") Integer id, @RequestBody EcApplicationDto ecApplicationDto,
            @RequestHeader(name = "Authorization") String token
    ) {
        // Extract the user's id and role from the token
        Jwt jwt = jwtDecoder.decode(token.split(" ")[1]);
        Long userId = jwt.getClaim("userId");
        String userRole = jwt.getClaim("roles");

        if (!ecApplicationService.exists(id))
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        // Students are only allowed to update their own EC applications
        if (userRole.equals("Student") &&
                ecApplicationService.findOneById(id).get().getStudent().getId() != userId.intValue())
        {
            return new ResponseEntity<>(HttpStatus.FORBIDDEN);
        }

        ecApplicationDto.setId(id);
        EcApplicationEntity ecApplicationEntity = ecApplicationMapper.mapFromDto(ecApplicationDto);
        EcApplicationEntity updatedEcApplicationEntity = ecApplicationService.partialUpdate(id, ecApplicationEntity);
        return new ResponseEntity<>(ecApplicationMapper.mapToDto(updatedEcApplicationEntity), HttpStatus.OK);
    }

    @DeleteMapping(path = "/ec-applications/{id}")
    public ResponseEntity<String> deleteEcApplication(@PathVariable("id") Integer id) {
        ecApplicationService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Map<String, String> handleValidationExceptions(
            MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return errors;
    }

}
