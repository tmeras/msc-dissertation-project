package com.theodoremeras.dissertation.ec_application;

import com.theodoremeras.dissertation.user.UserEntity;
import com.theodoremeras.dissertation.user.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
public class EcApplicationController {

    private EcApplicationService ecApplicationService;

    private UserService userService;

    private EcApplicationMapper ecApplicationMapper;

    public EcApplicationController(
            EcApplicationService ecApplicationService, UserService userService,
           EcApplicationMapper ecApplicationMapper
    ) {
        this.ecApplicationService = ecApplicationService;
        this.userService = userService;
        this.ecApplicationMapper = ecApplicationMapper;
    }

    @PostMapping(path = "/ec-applications")
    public ResponseEntity<EcApplicationDto> createEcApplication(@RequestBody EcApplicationDto ecApplicationDto) {
        // Id will be autogenerated
        ecApplicationDto.setId(null);
        ecApplicationDto.setIsReferred(false);

        EcApplicationEntity ecApplicationEntity = ecApplicationMapper.mapFromDto(ecApplicationDto);

        // Student who submitted the application must be specified
        if (ecApplicationEntity.getStudent() == null)
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

        // Verify that the specified student exists
        Optional<UserEntity> student = userService.findOneById(ecApplicationEntity.getStudent().getId());
        if (student.isPresent())
            ecApplicationEntity.setStudent(student.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        EcApplicationEntity savedEcApplicationEntity = ecApplicationService.save(ecApplicationEntity);
        System.out.println(savedEcApplicationEntity);
        return new ResponseEntity<>(ecApplicationMapper.mapToDto(savedEcApplicationEntity), HttpStatus.CREATED);
    }

    @GetMapping(path = "/ec-applications")
    public List<EcApplicationDto> getAllEcApplications() {
        List<EcApplicationEntity> ecApplicationEntities = ecApplicationService.findAll();
        return ecApplicationEntities.stream()
                .map(ecApplicationMapper::mapToDto)
                .collect(Collectors.toList());
    }

    @GetMapping(path = "/ec-applications/{id}")
    public ResponseEntity<EcApplicationDto> getEcApplicationById(@PathVariable("id") Integer id) {
        Optional<EcApplicationEntity> foundEcApplicationEntity = ecApplicationService.findOneById(id);
        return foundEcApplicationEntity.map(ecApplicationEntity -> {
            EcApplicationDto ecApplicationDto = ecApplicationMapper.mapToDto(ecApplicationEntity);
            return new ResponseEntity<>(ecApplicationDto, HttpStatus.OK);
        }).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PatchMapping(path = "/ec-applications/{id}")
    public ResponseEntity<EcApplicationDto> partialUpdateEcApplication(
            @PathVariable("id") Integer id, @RequestBody EcApplicationDto ecApplicationDto
    ) {
        if (!ecApplicationService.exists(id))
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        ecApplicationDto.setId(id);
        EcApplicationEntity ecApplicationEntity = ecApplicationMapper.mapFromDto(ecApplicationDto);
        EcApplicationEntity updatedEcApplicationEntity = ecApplicationService.partialUpdate(id, ecApplicationEntity);
        return new ResponseEntity<>(ecApplicationMapper.mapToDto(updatedEcApplicationEntity), HttpStatus.OK);
    }

    @DeleteMapping(path = "/ec-applications/{id}")
    public ResponseEntity<String> deleteEcApplication(@PathVariable("id") Integer id) {
        ecApplicationService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
