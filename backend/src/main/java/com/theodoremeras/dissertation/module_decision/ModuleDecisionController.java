package com.theodoremeras.dissertation.module_decision;

import com.theodoremeras.dissertation.ec_application.EcApplicationEntity;
import com.theodoremeras.dissertation.ec_application.EcApplicationService;
import com.theodoremeras.dissertation.module_request.ModuleRequestEntity;
import com.theodoremeras.dissertation.module_request.ModuleRequestService;
import com.theodoremeras.dissertation.user.UserEntity;
import com.theodoremeras.dissertation.user.UserService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
public class ModuleDecisionController {

    private ModuleDecisionService moduleDecisionService;

    private ModuleRequestService moduleRequestService;

    private UserService userService;

    private EcApplicationService ecApplicationService;

    private ModuleDecisionMapper moduleDecisionMapper;

    public ModuleDecisionController(
            ModuleDecisionService moduleDecisionService, ModuleRequestService moduleRequestService,
            UserService userService, EcApplicationService ecApplicationService, ModuleDecisionMapper moduleDecisionMapper
    ) {
        this.moduleDecisionService = moduleDecisionService;
        this.moduleRequestService = moduleRequestService;
        this.userService = userService;
        this.ecApplicationService = ecApplicationService;
        this.moduleDecisionMapper = moduleDecisionMapper;
    }

    @PostMapping(path = "/module-decisions")
    public ResponseEntity<ModuleDecisionDto> createModuleDecision(
            @RequestBody @Valid ModuleDecisionDto moduleDecisionDto
    ) {
        // Id will be autogenerated
        moduleDecisionDto.setId(null);

        ModuleDecisionEntity  moduleDecisionEntity = moduleDecisionMapper.mapFromDto(moduleDecisionDto);

        // Verify that the specified module request exists
        Optional<ModuleRequestEntity> moduleRequest =
                moduleRequestService.findOneById(moduleDecisionEntity.getModuleRequest().getId());
        if (moduleRequest.isPresent())
            moduleDecisionEntity.setModuleRequest(moduleRequest.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        // Verify that the specified staff member exists
        Optional<UserEntity> staff =
                userService.findOneById(moduleDecisionEntity.getStaffMember().getId());
        if (staff.isPresent())
            moduleDecisionEntity.setStaffMember(staff.get());
        else
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        ModuleDecisionEntity savedModuleDecisionEntity = moduleDecisionService.save(moduleDecisionEntity);
        return new ResponseEntity<>(moduleDecisionMapper.mapToDto(savedModuleDecisionEntity), HttpStatus.CREATED);
    }

    @GetMapping(path = "/module-decisions")
    public List<ModuleDecisionDto> getAllModuleDecisions(
            @RequestParam(value = "moduleRequestId", required = false) Integer moduleRequestId,
            @RequestParam(value = "staffMemberId", required = false) Integer staffMemberId,
            @RequestParam(value = "ecApplicationId", required = false) Integer ecApplicationId
    ) {
        List<ModuleDecisionEntity>  moduleDecisionEntities;

        // Fetch the module decisions matching the provided module request id
        if (moduleRequestId != null)
            moduleDecisionEntities = moduleDecisionService.findAllByModuleRequestId(moduleRequestId);
        // Fetch the module decisions matching the provided staff member id
        else if (staffMemberId != null)
            moduleDecisionEntities = moduleDecisionService.findAllByStaffMemberId(staffMemberId);
        // Fetch the module decisions matching the provided EC application id
        else if (ecApplicationId != null)
            moduleDecisionEntities = moduleDecisionService.findAllByEcApplicationId(ecApplicationId);
        // Otherwise, fetch all module decisions
        else
            moduleDecisionEntities = moduleDecisionService.findAll();

        return moduleDecisionEntities.stream()
                .map(moduleDecisionMapper::mapToDto)
                .collect(Collectors.toList());
    }

    @GetMapping(path = "/module-decisions/{id}")
    public ResponseEntity<ModuleDecisionDto> getModuleDecisionById(@PathVariable("id") Integer id) {
        Optional<ModuleDecisionEntity> foundEntity = moduleDecisionService.findOneById(id);
        System.out.println(foundEntity);

        return foundEntity.map(moduleDecisionEntity -> {
            ModuleDecisionDto moduleDecisionDto = moduleDecisionMapper.mapToDto(moduleDecisionEntity);
            return new ResponseEntity<>(moduleDecisionDto, HttpStatus.OK);
        }).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @DeleteMapping(path = "/module-decisions/{id}")
    public ResponseEntity<String> deleteModuleDecision(@PathVariable("id") Integer id) {
        moduleDecisionService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Map<String, String> handleValidationExceptions(
      MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return errors;
    }

}
