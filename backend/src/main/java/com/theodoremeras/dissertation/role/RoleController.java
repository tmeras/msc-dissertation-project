package com.theodoremeras.dissertation.role;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
public class RoleController {

    private RoleService roleService;

    private RoleMapper roleMapper;

    public RoleController(RoleService roleService, RoleMapper roleMapper) {
        this.roleService = roleService;
        this.roleMapper = roleMapper;
    }

    @PostMapping(path = "/roles")
    public ResponseEntity<RoleDto> createRole(@RequestBody RoleDto roleDto) {
        // Id will be autogenerated
        roleDto.setId(null);

        RoleEntity roleEntity = roleMapper.mapFromDto(roleDto);
        RoleEntity savedRoleEntity = roleService.save(roleEntity);
        return new ResponseEntity<>(roleMapper.mapToDto(savedRoleEntity), HttpStatus.CREATED);
    }

    @GetMapping(path = "/roles")
    public List<RoleDto> getAllRoles() {
        List<RoleEntity> roleEntities = roleService.findAll();

        return roleEntities.stream()
                .map(roleMapper::mapToDto)
                .collect(Collectors.toList());
    }

    @GetMapping(path = "/roles/{id}")
    public ResponseEntity<RoleDto> getRoleById(@PathVariable("id") Integer id) {
        Optional<RoleEntity> foundRole = roleService.findOneById(id);
        return foundRole.map(roleEntity -> {
            RoleDto roleDto = roleMapper.mapToDto(roleEntity);
            return new ResponseEntity<>(roleDto, HttpStatus.OK);
        }).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PatchMapping(path = "/roles/{id}")
    public ResponseEntity<RoleDto> partialUpdateRole(@PathVariable Integer id, @RequestBody RoleDto roleDto) {
        if (!roleService.exists(id))
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        roleDto.setId(id);
        RoleEntity roleEntity = roleMapper.mapFromDto(roleDto);
        RoleEntity updatedRoleEntity = roleService.partialUpdate(id, roleEntity);
        return new ResponseEntity<>(roleMapper.mapToDto(updatedRoleEntity), HttpStatus.OK);
    }

    @DeleteMapping(path = "/roles/{id}")
    public ResponseEntity<String> deleteRole(@PathVariable Integer id) {
        roleService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}
