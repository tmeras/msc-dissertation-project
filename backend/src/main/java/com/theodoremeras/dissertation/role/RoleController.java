package com.theodoremeras.dissertation.role;

import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
public class RoleController {

    private final RoleService roleService;

    private final RoleMapper roleMapper;

    public RoleController(RoleService roleService, RoleMapper roleMapper) {
        this.roleService = roleService;
        this.roleMapper = roleMapper;
    }

    @PostMapping(path = "/roles")
    public ResponseEntity<RoleDto> createRole(@RequestBody @Valid RoleDto roleDto) {
        // Id will be autogenerated
        roleDto.setId(null);

        RoleEntity roleEntity = roleMapper.mapFromDto(roleDto);
        RoleEntity savedRoleEntity = roleService.save(roleEntity);
        return new ResponseEntity<>(roleMapper.mapToDto(savedRoleEntity), HttpStatus.CREATED);
    }

    @GetMapping(path = "/roles")
    public List<RoleDto> getAllRoles(
            @RequestParam(value = "name", required = false) String roleName
    ) {
        // Determine whether to fetch all roles or only those matching the provided role name
        List<RoleEntity> roleEntities = (roleName == null) ? roleService.findAll() :
                roleService.findAllByRoleName(roleName);

        return roleEntities.stream()
                .map(roleMapper::mapToDto)
                .collect(Collectors.toList());
    }

    @DeleteMapping(path = "/roles/{id}")
    public ResponseEntity<String> deleteRole(@PathVariable Integer id) {
        roleService.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Map<String, String> handleValidationExceptions(
            MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return errors;
    }

}
